/**
 * App initialization
 * @namespace Modules
 */

(function () {
  'use strict';

  angular
    .module('app', [
      'ngRoute',
      'ngAnimate',
      'ngResource',
      'ui.bootstrap',
      'toaster'
    ]);
})();
/**
 * App configuration
 * @namespace Modules
 */
(function () {
  'use strict';
  angular
    .module('app')
    .config(configure);

  /**
   * @namespace Configuration
   * @desc Application configuration on setup
   * @memberOf Modules
   *
   * @param $locationProvider
   * @param $httpProvider
   * @param $routeProvider
   *
   * @ngInject
   */
  function configure($locationProvider, $httpProvider, $routeProvider) {
    $locationProvider.html5Mode({enabled: true, requireBase: false});
    $httpProvider.interceptors.push('ldAuthInterceptorService');
    $routeProvider.otherwise({redirectTo: '/'});
  }
  configure.$inject = ["$locationProvider", "$httpProvider", "$routeProvider"];
})();

/**
 * runBlock
 * @namespace Modules
 */
(function () {
  'use strict';

  angular.module('app')
    .run(runBlock);

  /**
   * @name runBlock
   * @desc Redirects users when not authorized jwt is used.
   * @memberOf Modules
   *
   * @param $rootScope
   * @param $location
   *
   * @ngInject
   */
  function runBlock($rootScope, $location) {
    $rootScope.$on('$routeChangeError', function (evt, current, previous, rejection) {
      if (rejection === 'not authorized') {
        $location.path('/');
      }
    });
  }
  runBlock.$inject = ["$rootScope", "$location"];
})();
/**
 *
 * @namespace 'Controllers'
 */
(function () {
  'use strict';

  angular
    .module('app')
    .controller('ldProfileController', ldProfileController);


  /**
   * @namespace
   * @memberOf 'Controllers'
   *
   * @ngInject
   */
  function ldProfileController(ldUserIdentityService, ldNotificationService, ldUserAuthService) {

    var vm = this;
    var newUserData = {};
    vm.title = 'ldProfileController';
    vm.display = {};
    vm.identity = ldUserIdentityService;
    vm.notify = ldNotificationService;
    vm.auth = ldUserAuthService;
    vm.update = update;

    activate();

    ////////////////

    function activate() {
      vm.display = vm.identity.currentUser().display;
    }

    function update() {
      newUserData = {
        display: vm.display
      };
      if (vm.password && vm.password.length > 0) {
        newUserData.password = vm.password;
      }

      vm.auth.updateCurrentUser(newUserData)
        .then(function () {
          vm.notify.notify('Your user account has been updated');
        }, function (reason) {
          vm.notify.error(reason);
        });


    }

  }
  ldProfileController.$inject = ["ldUserIdentityService", "ldNotificationService", "ldUserAuthService"];
})();
/**
 * User list routing
 * @namespace Modules
 */
(function () {
  'use strict';

  angular
    .module('app')
    .config(configure);

  /**
   * @namespace Configuration
   * @param $routeProvider
   * @memberOf Modules
   *
   * @ngInject
   */
  function configure($routeProvider) {

    $routeProvider
      .when('/profile', {
        templateUrl : '/partials/account/profile',
        controller  : 'ldProfileController',
        controllerAs: 'vm',
        resolve     : {authCheck : isAuthenticated}
      });

    /**
     * @name checkAdmin
     * @desc checks if user is logged in
     * @memberOf Modules.Configuration

     * @returns {boolean} Has user got role?
     *
     * @ngInject
     */
    function isAuthenticated(ldRouteAccessService) {
      return ldRouteAccessService.isAuthenticated();
    }
    isAuthenticated.$inject = ["ldRouteAccessService"];
  }
  configure.$inject = ["$routeProvider"];
})();
/**
 * User List Controller
 * @namespace Controllers
 */
(function (){
  'use strict';
  angular
    .module('app')
    .controller('ldUserListController', ldUserListController);

  /**
   * @namespace UserListController
   * @memberOf Controllers
   *
   * @param ldApiUserService
   *
   * @ngInject
   */
  function ldUserListController(ldApiUserService) {
    /* jshint validthis: true */
    var vm = this;
    vm.users = {};
    vm.userResource = ldApiUserService;

    vm.activate = activate;
    vm.title = 'ldUserListController';

    activate();

    ////////////////

    /**
     * @name activate
     * @desc Module inittiation
     * @memberOf Controllers.UserListController
     */
    function activate() {
     queryUsers();
    }

    /**
     * @name queryUser
     * @desc Queries user data for controller
     * @memberOf Controllers.UserListController
     *
     */
    function queryUsers() {
      vm.users = vm.userResource.query();
    }

  }
  ldUserListController.$inject = ["ldApiUserService"];
})();
/**
 * User list routing
 * @namespace Modules
 */
(function () {
  'use strict';

  angular
    .module('app')
    .config(configure);

  /**
   * @namespace Configuration
   * @param $routeProvider
   * @memberOf Modules
   *
   * @ngInject
   */
  function configure($routeProvider) {

    $routeProvider
      .when('/admin/users', {
        templateUrl : '/partials/admin/userlist',
        controller  : 'ldUserListController',
        controllerAs: 'vm',
        resolve     : {routeResolveCheck: checkAdmin }
      });

    /**
     * @name checkAdmin
     * @desc checks if user logged in with admin rights
     * @memberOf Modules.Configuration
     * @param ldRouteAccessService
     * @returns {boolean} Has user got role?
     *
     * @ngInject
     */
    function checkAdmin(ldRouteAccessService) {
      return ldRouteAccessService.isAuthorizedFor('admin');
    }
    checkAdmin.$inject = ["ldRouteAccessService"];
  }
  configure.$inject = ["$routeProvider"];
})();
/**
 * Top Navigation Controller
 * @namespace Controllers
 */
(function () {
  'use strict';

  angular
    .module('app')
    .controller('ldTopNavController', ldTopNavController);

  /**
   * @namespace TopNavController
   * @desc Handles top navigation bar login and logout
   * @memberOf Controllers
   *
   * @param ldUserIdentityService
   * @param ldUserAuthService
   * @param $location
   * @param ldNotificationService
   * @param ldUserAccessService
   *
   * @ngInject
   */
  function ldTopNavController(ldUserIdentityService,
                              $location,
                              ldNotificationService,
                              ldUserAuthService,
                              ldUserAccessService) {
    var vm = this;
    vm.auth = ldUserAuthService;
    vm.notifier = ldNotificationService;
    vm.identity = ldUserIdentityService;
    vm.access = ldUserAccessService;


    /**
     * @name signIn
     * @desc Function for authenticating and signing in user
     * @memberOf Controllers.TopNavController
     *
     * @param {string} username
     * @param {string} password
     */
    vm.signIn = function (username, password) {
      vm.auth.authenticateUser(username, password)
        .then(function (promise) {
          if (promise === true) {
            vm.display = vm.identity.currentUser().display;
            vm.notifier.notify('You have successfully signed in!');
          } else {
            vm.notifier.error('Username/Password combination incorrect');
          }
        });
    };

    /**
     * @name signOut
     * @desc Function for logging out user
     * @memberOf Controllers.TopNavController
     */
    vm.signOut = function () {
      vm.auth.logOutUser();
      vm.display = '';
      vm.notifier.info('You have successfully signed out!');
      $location.path('/');
    };


  }
  ldTopNavController.$inject = ["ldUserIdentityService", "$location", "ldNotificationService", "ldUserAuthService", "ldUserAccessService"];
})();
/**
 * Main landing page Controller
 * @namespace Controllers
 */
(function () {
  'use strict';

  angular
    .module('app')
    .controller('ldMainController', ldMainController);

  /**
   * @namespace MainController
   * @desc Landing page controller
   * @memberOf Controllers
   *
   * @ngInject
   */
  function ldMainController() {
    /* jshint validthis: true */
    var vm = this;

    vm.activate = activate;
    vm.title = 'ldMainController';


    activate();

    ////////////////

    /**
     * @name activate
     * @desc handles main page data
     * @memberOf Controllers.MainController
     *
     * @ngInject
     */
    function activate() {
    }
  }
}());
(function () {
  'use strict';

  angular
    .module('app')
    .config(configure);

  /**
   *
   * @param $routeProvider
   *
   * @ngInject
   */
  function configure($routeProvider) {
    $routeProvider
      .when('/', {
        templateUrl : '/partials/main/main',
        controller  : 'ldMainController',
        controllerAs: 'vm'
      });
  }
  configure.$inject = ["$routeProvider"];
})();
(function () {
  'use strict';

  angular
    .module('app')
    .factory('ldApiService', ldApiService);


  /* @ngInject */
  function ldApiService($resource) {

    return {
      User: UserResource
    };

    ////////////////

    function UserResource() {
      return $resource('/api/users/:id', {id: '@id'}, {
        update: {method: 'PUT', isArray: false}
      });
    }


  }
  ldApiService.$inject = ["$resource"];

}());
(function () {
  'use strict';

  angular
    .module('app')
    .factory('ldApiUserService', ldApiUserService);

  /* @ngInject */
  function ldApiUserService($resource) {

    return $resource('/api/users/:id', {id: '@id'}, {
      update: {method: 'PUT', isArray: false}
    });


  }
  ldApiUserService.$inject = ["$resource"];

})();
(function () {
  'use strict';

  angular
    .module('app')
    .factory('ldAuthInterceptorService', ldAuthInterceptorService);


  /* @ngInject */
  function ldAuthInterceptorService($q, $window, $rootScope) {
    var service = {
      request      : request,
      responseError: responseError
    };

    return service;

    ////////////////

    function request(config) {
      config.headers = config.headers || {};
      if ($window.sessionStorage.token) {
        config.headers.Authorization = 'Bearer ' + $window.sessionStorage.token;
      }
      return config;
    }

    function responseError(rejection) {
      if (rejection.status === 401) {
        // handle the case where the user is not authenticated
        console.log('we got here? authinterceptor?')
      }
      return $q.reject(rejection.data.toString());
    }

  }
  ldAuthInterceptorService.$inject = ["$q", "$window", "$rootScope"];

})();
/**
 * Notification Service
 * @namespace Factories
 */
(function () {
  'use strict';

  angular
    .module('app')
    .factory('ldNotificationService', ldNotificationService);

  /**
   * @namespace NotificationService
   * @desc Handles serving pop-up notifications for the user
   * @memberOf Factories
   *
   * @ngInject
   */
  function ldNotificationService(toaster) {
    return {
      notify: notify,
      error : error,
      info  : info
    };

    ////////////////

    /**
     * @name notify
     * @desc Success message pop-up
     * @memberOf Factories.NotificationService
     *
     * @param {string} msg
     */
    function notify(msg) {
      toaster.pop('success', '', msg, 2500);
      console.log(msg);
    }

    /**
     * @name error
     * @desc Error message pop-up
     * @memberOf Factories.NotificationService
     *
     * @param {string} msg
     */
    function error(msg) {
      toaster.success({
        title: 'Wailing',
        body : msg
      });
      console.log(msg);
    }

    /**
     * @name info
     * @desc Info message pop-up
     * @memberOf Factories.NotificationService
     *
     * @param {string} msg
     */
    function info(msg) {
      toaster.pop({
        type: 'note',
        body: msg
      });
      console.log(msg);
    }
  }
  ldNotificationService.$inject = ["toaster"];

})();
(function () {
  'use strict';

  angular
    .module('app')
    .factory('ldRouteAccessService', ldRouteAccessService);

  /**
   *
   * @ngInject
   */
  function ldRouteAccessService(ldUserIdentityService, $q) {

    var currentUser;
    var identity = ldUserIdentityService;

    return {
      isAuthenticated: checkHasAuth,
      isAuthorizedFor: checkAuthRole
    };

    ////////////////
    /**
     * @returns {*}
     * @ngInject
     */
    function checkHasAuth() {
      currentUser = identity.currentUser();
      if (!!currentUser === true) {
        return true;
      } else {
        return $q.reject('not authorized');
      }
    }

    function checkAuthRole(role) {
      currentUser = identity.currentUser();
      if (!!currentUser && currentUser.roles.indexOf(role) > -1) {
        return true
      } else {
        return $q.reject('not authorized');
      }
    }
  }
  ldRouteAccessService.$inject = ["ldUserIdentityService", "$q"];

})();
/**
 * Token decoder factory
 * @namespace Factories
 */
(function () {
  'use strict';

  angular
    .module('app')
    .factory('ldTokenService', ldTokenService);

  var profile;
  var output;
  var encodedProfile;

  /**
   * @namespace TokenService
   * @desc Decodes jwt token for FE usage.
   * @memberOf Factories
   */
  function ldTokenService() {
    return {
      getProfile: decodeProfile
    };

    ////////////////
    /**
     * @name url_base64_decode
     * @desc Decodes string to find profile information.
     * @memberOf Factories.TokenService
     *
     * @param str String to be decoded
     * @returns {string} profile String with decoded user information
     */
    function url_base64_decode(str) {
      output = str.replace('-', '+').replace('_', '/');

      switch (output.length % 4) {
        case 0:
          break;
        case 2:
          output += '==';
          break;
        case 3:
          output += '=';
          break;
        default:
          throw 'Illegal base64url string!';
      }

      profile = JSON.parse(window.atob(output));
      return profile; //polifyll https://github.com/davidchambers/Base64.js
    }

    /**
     * @name splitToken
     * @desc Splits incoming jwt token and returns the user info part
     * @memberOf Factories.TokenService
     *
     * @param {string} str String that goes to splitting.
     * @returns {string}
     */
    function splitToken(str) {
      return str.split('.')[1];
    }

    /**
     * @name decodeProfile
     * @desc Handles decoding process from wild jwt string to readable user information
     * @memberOf Factories.TokenService
     *
     * @param {string} str Jwt token that comes from the server
     * @returns {string} Return decoded profile
     */
    function decodeProfile(str) {
      encodedProfile = splitToken(str);
      return url_base64_decode(encodedProfile);
    }
  }
})();



(function () {
  'use strict';

  angular
    .module('app')
    .factory('ldUserAccessService', ldUserAccessService);

  /**
   *
   * @ngInject
   */
  function ldUserAccessService(ldUserIdentityService) {

    var currentUser;
    var identity = ldUserIdentityService;

    return {
      isAuthenticated: checkHasAuth,
      isAuthorizedFor: checkAuthRole
    };

    ////////////////

    function checkHasAuth() {
      currentUser = identity.currentUser();
      return !!currentUser;
    }

    function checkAuthRole(role) {
      currentUser = identity.currentUser();
      return !!currentUser && currentUser.roles.indexOf(role) > -1;
    }
  }
  ldUserAccessService.$inject = ["ldUserIdentityService"];

})();
(function () {
  'use strict';

  angular
    .module('app')
    .factory('ldUserAuthService', ldUserAuthService);




  /* @ngInject */
  function ldUserAuthService($window, $q, $http, ldUserIdentityService) {
    var dfd;
    var clone;
    var identity = ldUserIdentityService;
    return {
      authenticateUser : doAuthRequest,
      logOutUser       : doLogOut,
      updateCurrentUser: doUpdateRequest
    };

    ////////////////

    function doAuthRequest(username, password) {
      dfd = $q.defer();
      $http
        .post('/auth', {username: username, password: password})
        .then(function authApiResponse(response) {
          if (response.data.token) {
            $window.sessionStorage.token = response.data.token;
            ldUserIdentityService.generateCurrentUser();
            dfd.resolve(true);
          } else {
            console.log('error');
            delete $window.sessionStorage.token;
            dfd.resolve(false);
          }
        });
      return dfd.promise;
    }

    function doLogOut() {
      delete $window.sessionStorage.token;
      ldUserIdentityService.signOut();
    }

    function doUpdateRequest(newUserData) {
      dfd = $q.defer();
      clone = angular.copy(identity.currentUser());
      angular.extend(clone, newUserData);
      clone.$update().then(function (response) {
        if (response.token) {
          identity.updateCurrentUser(response.token, clone);
          dfd.resolve(true);
        } else {
          delete $window.sessionStorage.token;
          // Handle login errors here
          dfd.resolve(response.error.reason);
        }
      });
      return dfd.promise;
    }
  }
  ldUserAuthService.$inject = ["$window", "$q", "$http", "ldUserIdentityService"];

})();
(function () {
  'use strict';

  angular
    .module('app')
    .factory('ldUserIdentityService', ldUserIdentityService);

  var currentUser;

  /* @ngInject */
  function ldUserIdentityService(ldTokenService, $window, ldApiUserService) {
    return {
      currentUser        : getCurrentUser,
      generateCurrentUser: generateCurrentUser,
      signOut            : doLogOut,
      updateCurrentUser  : updateCurrentUser
    };

    ////////////////

    function generateCurrentUser() {
      if (!!$window.sessionStorage.token) {
        currentUser = new ldApiUserService();
        angular.extend(currentUser, ldTokenService.getProfile($window.sessionStorage.token));
      }
    }

    function getCurrentUser() {
      if (!currentUser) {
        generateCurrentUser();
      }
      return currentUser;
    }

    function doLogOut() {
      currentUser = undefined;
    }

    function updateCurrentUser(token, clone) {
      $window.sessionStorage.token = token;
      angular.extend(clone, ldTokenService.getProfile(token));
      currentUser = clone;
    }

  }
  ldUserIdentityService.$inject = ["ldTokenService", "$window", "ldApiUserService"];

})();